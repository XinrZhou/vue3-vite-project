# 反向代理是位于一个或多个 Web 服务器前面的服务器,拦截来自客户端的请求
server {
  listen      80;
  server_name 122.9.33.79;
  # location = /uri    = 表示精确匹配，只有完全匹配上才能生效
  # location ^~ /uri    ^~ 开头对URL路径进行前缀匹配，并且在正则之前。
  # location ~ pattern    开头表示区分大小写的正则匹配
  # location ~* pattern    开头表示不区分大小写的正则匹配
  # location /uri    不带任何修饰符，也表示前缀匹配，但是在正则匹配之后
  # location /    通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default
  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
  }
  location /api {
    proxy_pass https://api.apiopen.top;
    proxy_redirect     off;
    # 始请求host，比如请求的时候HOST的值是http://test.com，那么反代后还是http://test.com
    proxy_set_header   Host                 $host;
    # 是指客户端的真实IP
    proxy_set_header   X-Real-IP            $remote_addr;
    proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
    # X-Forwarded-Proto 就是为了正确地识别实际用户发出的协议是 http 还是 https。
    proxy_set_header   X-Forwarded-Proto    $scheme;
    # Enables WS support
    # Connection头部和Upgrade头部有不同的语义和使用场景：
    # Connection: Upgrade 表示Upgrade是一个hop-by-hop的字段。这个头部是给proxy看的
    # Upgrade: websocket 表示浏览器想要升级到WebSocket协议。这个头部是给最终处理请求的程序看的。
    # 如果只有Upgrade: websocket，说明proxy不支持WebSocket升级，按照标准应该视为普通HTTP请求。    
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    # add_header 'Access-Control-Allow-Header' 'Content-Type,*';
  }    
 
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root html;
  }
}